"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encrypt = void 0;
const spawn_1 = __importDefault(require("./spawn"));
const utils_1 = require("./utils");
const EncryptDefaults = {
    keyLength: 256,
    overwrite: true,
};
const encrypt = async (userPayload) => {
    const payload = { ...EncryptDefaults, ...userPayload };
    if (!payload.input)
        throw new Error("Please specify input file");
    if (!(0, utils_1.fileExists)(payload.input))
        throw new Error("Input file doesn't exist");
    if (payload.output && !payload.overwrite && (0, utils_1.fileExists)(payload.output))
        throw new Error("Output file already exists");
    const callArguments = ["--encrypt"];
    if (typeof payload.password === "object") {
        if (payload.password.user === undefined ||
            payload.password.owner === undefined) {
            throw new Error("Please specify both owner and user passwords");
        }
        callArguments.push(payload.password.user, payload.password.owner);
    }
    else if (typeof payload.password === "string") {
        callArguments.push(payload.password, payload.password);
    }
    else {
        callArguments.push("", "");
    }
    callArguments.push(payload.keyLength.toString());
    if (payload.restrictions) {
        if (typeof payload.restrictions !== "object")
            throw new Error("Invalid Restrictions");
        for (const [restriction, value] of Object.entries(payload.restrictions)) {
            if (restriction === "useAes" && payload.keyLength === 256) {
            }
            else {
                callArguments.push(`--${(0, utils_1.hyphenate)(restriction)}=${value}`);
            }
        }
    }
    callArguments.push("--", payload.input);
    if (payload.output) {
        callArguments.push(payload.output);
    }
    else {
        callArguments.push("-");
    }
    return (0, spawn_1.default)(callArguments);
};
exports.encrypt = encrypt;
